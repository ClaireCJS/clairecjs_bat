@Echo off


:::::::::::::: haven't really touched this since 2012 or so ... ::::::::::::::::::: TODO ::: NEEDS WORK ::: TODO ::: NEEDS WORK ::: TODO


::::::: DEV ISSUES:
::: POSSIBLE TODO: replicate "no flac" option into "no wav" option, if needs arise
::: UNTESTED: "no flac" option is now implemented, but untested



:::::::::::::::: HOW-TO:   1) Configure the "PRIMARY SETUP CONFIGURATION" section in this script, or run "sync-music setup" on a new mp3 storage device
:::::::::::::::: HOW-TO:   2) Modify option files on your devices / memory cards. (See below.)
:::::::::::::::: HOW-TO:      At a minimum, you need a MANDATORY IDENTIFICATION file.
:::::::::::::::: HOW-TO:      At a maximum, you can override everything, making each memory card a different playlist(s).
:::::::::::::::: HOW-TO:   3) Run "sync-music" to check every drive or "sync-music X" if you just want to do drive X:
:::::::::::::::: HOW-TO:           OPTIONAL: set SYNCONLY=X  to only sync X:           (completely redundant interface that doesn't really have to exist)
:::::::::::::::: HOW-TO:           OPTIONAL: set    QUICK=1 for quickest possible run (basically sets NO_WIPE and NOCLEAN)
:::::::::::::::: HOW-TO:           OPTIONAL: set  NO_WIPE=1  to suppress wiping regardless of option file
:::::::::::::::: HOW-TO:           OPTIONAL: set  NOCLEAN=1  to suppress the partial wipe of things like BAK files (as well as WAV files, which we assume are short-term, i.e. you haven't convered it to mp3 yet but were too impatient to wait before listening to it)



::::::::::::::::: OPTION FILES EXPLANATION: FILENAMES YOU CAN DROP IN THE ROOT FOLDER OF A DEVICE, TO CONTROL SYNC OPTIONS: :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: MANDATORY IDENTIFICATION OPTIONS:
:: "__ mp3 holder __"                                    - The bare minimum to make a storage device be picked up by this script. 
::
:: PLAYLIST OPTIONS:
:: "__ mp3 sync option - no playlists __"                - Don't bother copying/syncing playlists, because the device using this doesn't support playlists (or uses proprietary formats).
::
:: PRE-SYNC FILE TYPE OPTIONS:
:: "__ mp3 sync option - no flac __"                     - Don't copy flac files. For devices that don't support flac. Occasionally cutting-edge playlists include fresh music that hasn't been converted to mp3 yet, but these should not be copied to drives intended for devices that can't handle these files.
::
:: PRE-SYNC FILE WIPE OPTIONS:
:: "__ mp3 sync option - auto-wipe __"                   - Wipe all music off prior to each sync, automatically. 
:: "__ mp3 sync option - ask for wipe __"                - Wipe all music off prior to each sync, if a prompt is answered with 'Y'.
:: "__ mp3 sync option - never wipe __"                  - Wipe all music off NEVER
::                                                       - DEFAULT: set ANSWER_WIPE to 0 or 1 in PRIMARY SETUP CONFIGURATION STEP#1 section to define.
:: SYNC PLAYLIST OPTIONS:
:: "__ mp3 sync option - sync always - CRTL __"          - This will change make it so CRTL.m3u is always synced,   nor prompted for.
:: "__ mp3 sync option - sync ask - CRTL __"             - This will change make it so CRTL.m3u is   only synced, after prompted for.
:: "__ mp3 sync option - sync never - CRTL __"           - This will change make it so CRTL.m3u is  never synced,   nor prompted for.
::                                                       - DEFAULT BEHAVIOR: set PLAYLIST_SYNC_{PLAYLISTNAME} to YES/NO/ASK in the PRIMARY SETUP CONFIGURATION STEP#3 section to define.
:: POST-SYNC MANAGEMENT OPTIONS:
:: "__ mp3 sync option - collapse __"                    - This will collapse all mp3s into one folder. Good for playback devices that won't shuffle across different folders. Shoves all the music into the root folder. 
::
:: DEPRECATED OPTIONS:
:: "__ mp3 sync option - do not check for free space __" - During pre-wipe phase, will skip the free space prompt and pressing a key to continue. Nowadays we simply use "__ mp3 sync option - auto-wipe __". Leaving this for backward compatibility
:: "__ mp3 sync option - do not auto-sync CRTL __"       - May work with deprecated devices, but probably dead as of 201506.
:: "__ mp3 sync option - sync automatically - oh __"     - We now say "always" instead of "automatically"; leaving this for backward compatibility
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::




::::: ALLLOW FOR QUICK SETUP OF NEW MP3 DEVICES/USB DRIVES:
    if "%1" ne "SETUP"  goto :NotSettingUp
        %COLOR_WARNING% %+ echo WARNING: About to set up this device to sync mp3s to. You sure you want to do this?!?!?!?! %+ %COLOR_NORMAL%
        pause %+ pause %+ pause %+ pause %+ pause %+ pause %+ pause %+ pause %+ pause 
        cd \
        if not isdir mp3 md MP3
        >"__ mp3 holder __"
        >"__ mp3 sync option - no playlists MAYBE SET THIS ONE LATER __"
        >"__ mp3 sync option - auto-wipe __"
        >"__ mp3 sync option - collapse __"
        >"__ mp3 sync option - sync always - oh __"
        >"__ mp3 sync option - sync always - CRTL __"
        >"__ mp3 sync option - sync never - best __
        >"__ mp3 sync option - sync never - party __
        >"__ mp3 sync option - sync never - changer __"
        call rn *sync*
        dir
        %COLOR_SUCCESS% %+ echo All done! %+ %COLOR_NORMAL%
        goto :END
    :NotSettingUp









::::::::::::::::::::::::::::::::::::::::::::::::::: PRIMARY SETUP CONFIGURATION: BEGIN: ::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::: PRIMARY SETUP CONFIGURATION: BEGIN: ::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::: PRIMARY SETUP CONFIGURATION: BEGIN: ::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::: PRIMARY SETUP CONFIGURATION: BEGIN: ::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::: PRIMARY SETUP CONFIGURATION: BEGIN: ::::::::::::::::::::::::::::::::::::::::::::::

    ::::: CONFIGURATION: STEP 0: WIPE ENVIRONMENT VARIABLES THAT MAY BE LEFT OVER FROM PREVIOUS RUNS, CAUSING BAD SIDE-EFFECTS
    ::::: DON'T ALTER THIS SECTION!!
        unset /q VALUE
        unset /q ARG1
        unset /q PLAYLIST_DEFAULT_SYNC_*
        unset /q SYNC_ANSWER_*
        unset /q ANWER*

    ::::: CONFIGURATION: STEP 1: DEFAULT WIPE POLICY IN THE ABSENCE OF AN OPTION FILE: 
    ::::: This is what happens if you DON'T drop an option file stating whether to wipe the music off of the device or not.
    ::::: If no file is given, should we wipe all music by default (set to 1), or not (set to 0)?
        set ANSWER_WIPE_DEFAULT=0

    ::::: CONFIGURATION: STEP 2: WHICH PLAYLISTS TO CONSIDER: 
    ::::: This is a full set of the playlists that we will ever sync to any device 
    ::::: Each of these playlists will need a default sync policy set in step 3 below
    ::::: For example, if you only ever care about party.m3u and car.m3u, set POTENTIAL_PLAYLISTS=CAR PARTY
        set POTENTIAL_PLAYLISTS=OH CRTL CHANGERRECENT PARTY BEST CHANGER 

    ::::: CONFIGURATION: STEP 3: WHICH PLAYLISTS GET SYNCED IN THE ABSENCE OF AN OPTION FILE:
    ::::: For each playlist defined in the POTENTIAL_PLAYLISTS in STEP 2, you need to define a default sync policy
    ::::: This determines whether that playlist's music is synced or not.  Allowable options are "YES", "NO", and "ASK".
    ::::: Beware! "ASK" will stop and ask. If your goal is to sync many devices overnight while you sleep, ASK IS BAD.
        set PLAYLIST_DEFAULT_SYNC_OH=YES
        set PLAYLIST_DEFAULT_SYNC_CRTL=NO
        set PLAYLIST_DEFAULT_SYNC_CHANGERRECENT=NO
        set PLAYLIST_DEFAULT_SYNC_PARTY=YES
        set PLAYLIST_DEFAULT_SYNC_BEST=ASK
        set PLAYLIST_DEFAULT_SYNC_CHANGER=YES

    ::::: CONFIGURATION: STEP 4: SET HARD-CODED OPERATING SYSTEM VALUES:
    ::::: How do you wipe files? How do you launch scripts? 
    ::::: How do you handle whether launched scripts disappear after they are run?
    ::::: Alter at risk:
        set WIPECOMMAND=*del /q
        set WIPELIST=wipelist.txt
        set LAUNCHER_START=start /min
        set LAUNCHER_CALL=call
        set LAUNCHER=%LAUNCHER_CALL%
        set EXITAFTER=0 %+ if "%LAUNCHER%" eq "%LAUNCHER_START%" set EXITAFTER=1

    ::::: CONFIGURATION: STEP 5: CONFIGURATION VALIDATION:
        for %var in (%POTENTIAL_PLAYLISTS%) if not defined PLAYLIST_DEFAULT_SYNC_%var% (%COLOR_ALARM% %+ echo * FATAL ERROR: %%PLAYLIST_DEFAULT_SYNC_%var% NOT DEFINED! %+ pause %+ goto :END)
                                            if not defined LAUNCHER                    (%COLOR_ALARM% %+ echo * FATAL ERROR: %%LAUNCHER NOT DEFINED!!!!!!!!!!!!!!!!!!!! %+ pause %+ goto :END)

::::::::::::::::::::::::::::::::::::::::::::::::::: PRIMARY SETUP CONFIGURATION: END :::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::: PRIMARY SETUP CONFIGURATION: END :::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::: PRIMARY SETUP CONFIGURATION: END :::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::: PRIMARY SETUP CONFIGURATION: END :::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::: PRIMARY SETUP CONFIGURATION: END :::::::::::::::::::::::::::::::::::::::::::::::::


::::: INTERNAL FLAGS:
	set ANSWER_WIPE=%ANSWER_WIPE_DEFAULT%
    set ERROR=0

::::: DEBUG FLAGS:                                  // if  %DEBUG% the environment variable is set, let's turn on ALL the debug flags:
	set DEBUG_WIPE=0                                %+ if "%DEBUG%" eq "1" (set DEBUG_WIPE=1                             )
    set DEBUG_DETERMINE_WHICH_PLAYLISTS_TO_SYNC=0   %+ if "%DEBUG%" eq "1" (set DEBUG_DETERMINE_WHICH_PLAYLISTS_TO_SYNC=1)
:goat


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::: SETUP & VALIDATION:
    set ARG1=%1
    gosub SetupAndValidation

:::: COMMAND-LINE BRANCHING:
    if "%1" eq "" .and. "%@READY[%SYNCONLY%]" eq "1" set ARG1=%SYNCONLY%        %+ call print-if-debug SYNCONLY         is %SYNCONLY%
    set                                 SYNC_DRIVE_READY=%@READY[%ARG1%]        %+ call print-if-debug SYNC_DRIVE_READY is %SYNC_DRIVE_READY%
    if "%ARG1%" eq ""              (set SYNC_DRIVE_READY=0      )               %+ call print-if-debug SYNC_DRIVE_READY is %SYNC_DRIVE_READY%
	if "%SYNC_DRIVE_READY%" eq "1" (goto :single_drive_execution)               
        :multi_drive_execution     
            echo. %+ echo. %+ echo. %+ echo. %+ echo. %+ echo. %+ echo. %+ echo. 
            if "%DEBUG%" eq "1" (%COLOR_DEBUG% %+ echo * Multi-drive execution! %+ %COLOR_NORMAL% %+ pause)
            for %DriveLetter in (%THE_ALPHABET_BY_DRIVE_PRIORITY%) gosub syncDriveLetter %DriveLetter%
            goto :END            

        :single_drive_execution
            if "1" eq "%DEBUG%"         (%COLOR_DEBUG% %+ echo * Single-drive execution! %+ %COLOR_NORMAL% %+ pause)
            if "1" ne "%@READY[%ARG1%]" (gosub FatalError "%ARG1% is not ready (or is not a drive letter)"         )
            gosub syncDriveLetter %ARG1%
            goto :END
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::












                                 %COLOR_ALARM% %+ call alarmbeep %+ echo SHOULD NEVER GET HERE, WTF! %+ PAUSE












::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:syncDriveLetter [DriveLetter]
    :: Check parameters
        if "%DriveLetter%" eq "" (%COLOR_ALARM% %+ echos * %%DriveLetter passed to :syncDriveLetter cannot be blank?!?! What's going on?!?! %+ %COLOR_NORMAL% %+ pause %+ echo. %+ return)


    :: Let user know what's going on:
        echo. %+ echo. %+ echo. %+ echo. %+ echo. %+ echo. %+ echo. %+ echo. 
        %COLOR_IMPORTANT% %+ echo *** Checking drive %@UPPER[%DriveLetter%]:... %+ %COLOR_NORMAL%

    :: Validate some things:        
        if          "%@READY[%DriveLetter%]" eq "0"                   (%COLOR_WARNING% %+ echos * %DriveLetter% is not ready!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! %+ %COLOR_NORMAL% %+ echo. %+ goto :ReturnAlready)
        if          "%@UPPER[%DriveLetter%]" eq "%@UPPER[%MP3Drive%]" (%COLOR_WARNING% %+ echos * %DriveLetter% is the official repository drive! Not touching!! %+ %COLOR_NORMAL% %+ echo. %+ goto :ReturnAlready)
        if          "%@UPPER[%DriveLetter%]" eq "C"                   (%COLOR_WARNING% %+ echos * We do not sync to C drives! Sorry!!!!!!!!!!!!!!!!!!!!!!!!!!!!! %+ %COLOR_NORMAL% %+ echo. %+ goto :ReturnAlready)
        if "%[ALREADY_SYNCED_%DriveLetter%]" eq "1"                   (%COLOR_WARNING% %+ echos * This drive was already synced today... Skipping!!!!!!!!!!!!!!! %+ %COLOR_NORMAL% %+ echo. %+ goto :ReturnAlready)
        if  not isdir %DriveLetter%:\mp3 .and. not exist "%DriveLetter%:\__ mp3 sync option - collapse __" (%COLOR_WARNING% %+ echos * %@UPPER[%DriveLetter%:] does not have an \mp3\ folder!!!!!!!!! %+ %COLOR_NORMAL% %+ echo. %+ goto :ReturnAlready)
        if       "%@JUNCTION[%DriveLetter%:\mp3]" eq "%MP3OFFICIAL%"  (%COLOR_WARNING% %+ echos * %DriveLetter%:\mp3 is a junction to %@JUNCTION[%DriveLetter%:\mp3] which is our official collection!!!! Not touching!!!! %+ %COLOR_NORMAL% %+ echo. %+ goto :ReturnAlready)
        if        "%@SYMLINK[%DriveLetter%:\mp3]" eq "%MP3OFFICIAL%"  (%COLOR_WARNING% %+ echos * %DriveLetter%:\mp3 is a sym link to %@SYMLINK[%DriveLetter%:\mp3], which is our official collection!!!! Not touching!!!! %+ %COLOR_NORMAL% %+ echo. %+ goto :ReturnAlready)
        for %computer in (%ALL_COMPUTERS_UP%) if "%@UPPER[%[%DriveLetter%]]" eq "%@UPPER[%[%[DRIVE_C_%computer%]]]" .and. "" ne "%[%DriveLetter%]" .and. "" ne "%[DRIVE_C_%computer%]" (%COLOR_WARNING% %+ echos * We do not sync to C drives, and %DriveLetter% is %computer%'s C drive! Sorry! %+ %COLOR_NORMAL% %+ echo. %+ goto :ReturnAlready)
  
    :: Pass to our handler:
        if exist "%DriveLetter:\__ mp3 holder __" goto :GENERIC_YES            %+ REM  As tempting as it may be, launching each
        :f isdir "%DriveLetter:\mp3\"			  goto :GENERIC_YES            %+ REM  drive letter in a separate window will just
                                                  goto :GENERIC_NO             %+ REM  make each one copy that much slower:
            :GENERIC_YES
                gosub GENERIC %DriveLetter%                  %+ REM New-and-Improved Generic handling
                goto  :returnFromSyncDriveLetter
            :GENERIC_NO
                gosub DeprecatedCustomHandling %DriveLetter% %+ REM Fall through to our old code, if we must.
                goto  :returnFromSyncDriveLetter
        :returnFromSyncDriveLetter
        set ALREADY_SYNCED_%DriveLetter%=1

:ReturnAlready
return
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:GENERIC [DriveLetter]
    set LABEL=%@label[%DriveLetter%]
    :::::::syncMusic  [DriveLetter    Desc     BaseDir  PlaylistDir     Trigger]
    gosub  SyncMusic  %DriveLetter  "%LABEL%"  MP3      MP3\PLAYLISTS  "%MP3OFFICIAL\LISTS\TRIGGER-%LABEL%.TRG"   
return
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:syncMusic [DriveLetter Desc BaseDir PlaylistDir Trigger]
    %COLOR_SUCCESS% %+ echo *** %DESC% detected at %@UPPER[%DriveLetter%]: %+ %COLOR_NORMAL%
    gosub DisplayFreeSpaceIfInstructed           %DriveLetter%
    gosub DetermineWhichPlaylistsToSync          %DriveLetter% %Desc% %BaseDir% %PlaylistDir% %Trigger% 1 %+ REM 1st call passes "1" to suppress prompts 
    gosub StatePlaylistsSyncConclusions                                                                   %+ REM Now we display the --default-- sync status for the playlists
    gosub DetermineWhichPlaylistsToSync          %DriveLetter% %Desc% %BaseDir% %PlaylistDir% %Trigger% 0 %+ REM 2nd call passes "0" to include  prompts 
    gosub StatePlaylistsSyncConclusions                                                                   %+ REM Now we display the post-prompt sync status for the playlists
    gosub AskAboutWipingDevice                   %DriveLetter% %Desc% %BaseDir% %PlaylistDir% %Trigger%   %+ REM If a directive file specifies for this to happen, it won't ask, it will just do it
    gosub WipeDeviceAtAppropriateLevel           %DriveLetter% %Desc% %BaseDir% %PlaylistDir% %Trigger%
    gosub SyncTheM3UPlaylistFiles                %DriveLetter% %Desc% %BaseDir% %PlaylistDir% %Trigger%
    :osub OldSyncMusic                           
    gosub NewSyncMusic                           %DriveLetter% %Desc% %BaseDir% %PlaylistDir% %Trigger%
    gosub ValidateThePlaylistsAgainstTheMusic    %DriveLetter% %Desc% %BaseDir% %PlaylistDir% %Trigger%
    gosub CollapseTheFolderStructureIfInstructed
    gosub MarkWhenSyncOccurred
return
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


::::: DEPRECATED FUNCTIONS ONLY KEPT AROUND UNTIL THOSE DEVICES DIE (PROBABLY 2025!):

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :DeprecatedCustomHandling [driveletter]
                        %COLOR_ALARM% %+ echos * WARNING: we just hit the DeprecatedCustomHandling function for drive %driveLetter%
                        %COLOR_NORMAL %+ echo.
                        beep
                        pause
                        if exist "%DriveLetter:\__ 4G SD CARD in GPS __"              gosub :4GSDCARDINGPS
                        if exist "%DriveLetter:\__ 32G SDCard - 1 of 2 __"            gosub :32GSDCARD1
                        if exist "%DriveLetter:\__ 32G SDCard - 2 of 2 __"            gosub :32GSDCARD2
                        if exist "%DriveLetter:\__ Cowon iAUDIO x5 20G mp3 player __" gosub :COWON_20G
                        if exist "%DriveLetter:\__ Claire's iPhone 2G __"             gosub :iPHONE2G
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                        :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                        :32GSDCARD1
                            gosub SyncMusic %DriveLetter "32G SD card 1 of 2 (for SoundFly Aux)"  MP3   MUSIC\PLAYLIST %MP3OFFICIAL\LISTS\TRIGGER-CL-32G-SD-CARD-1.TRG %+ return
                        :32GSDCARD2
                            gosub SyncMusic %DriveLetter "32G SD card 2 of 2 (for SoundFly Aux)"  MP3   MUSIC\PLAYLIST %MP3OFFICIAL\LISTS\TRIGGER-CL-32G-SD-CARD-2.TRG %+ return
                        :4GSDCARDINGPS
                            gosub SyncMusic %DriveLetter "4G SD card (for Magellan GPS)"          MUSIC MUSIC\PLAYLIST %MP3OFFICIAL\LISTS\TRIGGER-CL-4G-SD-CARD.TRG    %+ return
                        :COWON_20G
                            gosub SyncMusic %DriveLetter "Cowan iAudio x5 mp3 player (Carolyn's)" MUSIC       PLAYLIST %MP3OFFICIAL\LISTS\TRIGGER-CASMP3.TRG           %+ return
                        :Carolyn_OLD_Way
                            if exist %MP3PLAYERCAS:\PLAYLIST\sync.bat call %MP3PLAYERCAS:\PLAYLIST\sync.bat %+ goto :END
                        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                        :iPHONE2G
                            %COLOR_ADVICE% %+ echo *** Remember, ExpanDrive must map the iPhone to P: for it to be detected. If it is running, this next line will say 2, else 1: %+ call pg expandrive|wc -l %+	echo. %+ echo. %+ echo. %+ pause %+ echo.
                            %COLOR_NORMAL% %+ gosub SyncMusic %DriveLetter "Claire's iPhone 2G (pwntunes must be installed)" music music\PLAYLISTSDONTWORKONIPHONE %MP3OFFICIAL\LISTS\TRIGGER-CL-IPHONE2G.TRG
                            %COLOR_ADVICE% %+ echo REMINDER: You may have to go into iPhone settings::pwnTunes and force a manual refresh. %+ echo. %+ %COLOR_WARNING% %+ echo WARNING!!!!! DO NOT FILL THE PARTITION UP PAST 90 PERCENT, OR IPHONE WILL GET SHITTY! Suggest ssh in and df repeatedly to stop any large-playlist syncs. %+ echo. %+ pause %+ %COLOR_NORMAL%
                        return
                        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                  :OldSyncMusic
::                      ::::: We optionally sync oh.m3u, because we save that sometimes:
::                          gosub OptionalSyncMusic %DriveLetter oh %BaseDir
::                           ::::: We almost always sync CRTL mp3s, since it is our "current learning music" / new music playlist,
::                          ::::: so we handle this differently -- annoying for maintainance, and maybe we shouldn't have done that:
::                              if exist "\__ mp3 sync option - do not auto-sync CRTL __" goto :CRTL_Auto_No
::                              if exist "\__ mp3 sync option - sync never - CRTL __"     goto :CRTL_Auto_No
::                              :CRTL_Auto_Yes
::                                  %COLOR_SUCCESS% %+ echo * Automatically syncing CRTL playlist:
::                                  %COLOR_DEBUG%   %+ echo      * RUNNING: %LAUNCHER%   sync-filelist %mp3\lists\CRTL.m3u %DriveLetter:\%BaseDir\
::                                  %COLOR_SUBTLE%  %+                      %LAUNCHER%   sync-filelist %mp3\lists\CRTL.m3u %DriveLetter:\%BaseDir\
::                                  %COLOR_NORMAL%
::                                  if "%EXITAFTER%" eq "1" goto :ExitAfter1_YES
::                                                          goto :ExitAfter1_NO
::                                      :ExitAfter1_YES
::                                          %COLOR_ADVICE% %+ echo * You may or may not want to let that run in another window... Afterward,
::                                          pause
::                                      :ExitAfter1_NO
::                                  goto :CRTL_Done
::                              :CRTL_Auto_No
::                                  ::::::::::::::syncMusic [DriveLetter Desc  BaseDir PlaylistDir Trigger]
::                                  gosub OptionalSyncMusic %DriveLetter CRTL %BaseDir
::                              :CRTL_Done
::                           ::::: But we also optionally sync other mp3s, for devices that have room for these playlists:
::                              ::::::::::::::syncMusic [DriveLetter Desc           BaseDir PlaylistDir Trigger]
::                              gosub OptionalSyncMusic %DriveLetter changerrecent %BaseDir
::                              gosub OptionalSyncMusic %DriveLetter changer       %BaseDir
::                  return
::                  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                  :OptionalSyncMusic [DriveLetter Playlist BaseDir]
::                      if "%DEBUG%" eq "1" (call print-if-debug OptionalSyncMusic %DriveLetter% %Playlist% %BaseDir%)
::                       ::::: Respond to option files that override our prompts:
::                          if exist "\__ mp3 sync option - sync never - %Playlist% __"      goto :Sync_NO
::                          if exist "\__ mp3 sync option - sync never - %Playlist%.m3u __"  goto :Sync_NO
::                          if exist "\__ mp3 sync option - sync always - %Playlist% __"     goto :Sync_YES
::                          if exist "\__ mp3 sync option - sync always - %Playlist%.m3u __" goto :Sync_YES
::                          if exist "\__ mp3 sync option - sync ask - %Playlist% __"        goto :Sync_ASK
::                          if exist "\__ mp3 sync option - sync ask - %Playlist%.m3u __"    goto :Sync_ASK
::                       ::::: ASK (show free space first):
::                          :Sync_ASK
::                              %COLOR_IMPORTANT% %+ echo. %+ free %+ echo.
::                              %COLOR_PROMPT%    %+ set question=* Sync mp3s required by playlist "%Playlist" to %DriveLetter: [%Desc] ??? [y/N] 
::                              %COLOR_INPUT%     %+ inkey /c /k"yn[Enter]" /x  %question %%key
::                              %COLOR_NORMAL%
::                       ::::: GET ANSWER:
::                              if "%key"=="y" goto :Sync_YES
::                              if "%key"=="n" goto :Sync_NO
::                              if  %key%==@28 goto :Sync_NO   %+ REM enter case
::                              if "%key"==""  goto :Sync_YES  %+ REM timeout case
::                       ::::: DO/DON'T BASED ON ANSWER:
::                          :Sync_YES
::                              %COLOR_RUN% %+ %LAUNCHER% sync-filelist %mp3\lists\%PlayList.m3u %DriveLetter:\%BaseDir\ %+ %COLOR_NORMAL%
::                              if "%EXITAFTER%" eq "1" (%COLOR_ADVICE% %+ echo * You may or may not want to let that run in another window... Afterward, %+ pause %+ %COLOR_NORMAL%)
::                          :Sync_NO
::                  echo.
::                  return
::                  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



::::: HELPER FUNCTIONS:

                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :SetupAndValidation
                        call environm force
                        call validate-environment-variables MP3 ALL_COMPUTERS_UP EXITAFTER FILEMASK_AUDIO LAUNCHER MP3OFFICIAL MP3PLAYERCAS THE_ALPHABET THE_ALPHABET_BY_DRIVE_PRIORITY USERNAME WIPECOMMAND WIPELIST
                        call validate-environment-variable  POTENTIAL_PLAYLISTS %+ for %%tmpList in (%POTENTIAL_PLAYLISTS%) if not defined PLAYLIST_DEFAULT_SYNC_%tmpList% gosub FatalError "You must set PLAYLIST_DEFAULT_SYNC_%@UPPER[%[tmpList]]=YES (or NO) because %tmpList% is in %%POTENTIAL_PLAYLISTS"
                        gosub MapCarolynOldCowanMP3PlayerOrNot
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :MapCarolynOldCowanMP3PlayerOrNot
                        if   "%MAPPING%" eq "1"                     goto :mapping_yes
                        if "%NOMAPPING%" eq "1" .or. "%QUICK%"=="1" goto :mapping_no
                                                                    goto :mapping_no
                            :mapping_yes
                                call remap-mp3-player           
                            :mapping_no
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :DisplayFreeSpaceIfInstructed [DriveLetter]
                        if "%NO_WIPE%" eq "1"                                           goto :FreeSpaceCheck_NO
                        if exist "\__ mp3 sync option - never wipe __"                  goto :FreeSpaceCheck_NO
                        if exist "\__ mp3 sync option - auto-wipe __"                   goto :FreeSpaceCheck_NO
                        if exist "\__ mp3 sync option - do not check for free space __" goto :FreeSpaceCheck_NO
                            %COLOR_PROMPT%  %+ echo. %+ echo. %+ echo. %+ echo Is there enough free space on %DriveLetter: ?
                            %COLOR_SUCCESS% %+ (free %DriveLetter: | highlight [0-9].*bytes.free) 
                            %COLOR_NORMAL%  %+ echo. 
                        :FreeSpaceCheck_NO
                    return
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :AskAboutWipingDevice [DriveLetter Desc BaseDir PlaylistDir Trigger]
                        if "1" eq    "%NO_WIPE%"                                       (  set    ANSWER_WIPE=0 %+ goto :AskForWipe_NO )
                        if exist "%DriveLetter%:\__ mp3 sync option - auto-wipe __"    (  set    ANSWER_WIPE=1 %+ goto :AskForWipe_NO )
                        if exist "%DriveLetter%:\__ mp3 sync option - never wipe __"   (  set    ANSWER_WIPE=0 %+ goto :AskForWipe_NO )
                        if exist "%DriveLetter%:\__ mp3 sync option - ask for wipe __" (unset /q ANSWER_WIPE   %+ goto :AskForWipe_YES)                        
                        if "%DEBUG_WIPE" eq "1" (%COLOR_DEBUG% %+ echo * Wipe questioning not yet performed/skipped. Current wipe is %ANSWER_WIPE% %+ %COLOR_NORMAL% %+ pause)
                        :AskForWipe_YES
                            %COLOR_PROMPT% %+ echo. %+ echo. %+ echos *** Wipe all existing mp3s on %Desc% (%DriveLetter:\%BaseDir%) (%@label[%DriveLetter%])?  [y/N]
                            %COLOR_INPUT%  %+ inkey /c /k"yn[Enter]" %%WIPEORNOT
                            %COLOR_NORMAL% %+ echo. %+ if "%@UPPER[%WIPEORNOT%]" eq "Y" SET ANSWER_WIPE=1
                        :AskForWipe_NO
                        if "%DEBUG_WIPE" eq "1" (%COLOR_DEBUG% %+ echo * Wipe questioning complete (or not performed). Current wipe answer is %ANSWER_WIPE% %+ %COLOR_NORMAL% %+ pause)
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :DetermineWhichPlaylistsToSync [DriveLetter Desc BaseDir PlaylistDir Trigger NoAsk]
                        for %%1 in (%POTENTIAL_PLAYLISTS%) do gosub DetermineIfPlaylistSyncs %1 %DriveLetter% %NoAsk%
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                        :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                        :DetermineIfPlaylistSyncs [playlist driveLetter NoAsk]
                            :: debug
                                if "%DEBUG%" eq "1" (call print-if-debug gosub :DetermineIfPlaylistSyncs [%playlist% %driveLetter% %NoAsk%]) 

                            :: make sure we are not being given conflicting sync directives
                                if exist "%FILE_TO_CAUSE_NOO%" .and. exist "%FILE_TO_CAUSE_YES%" (gosub "FATAL ERROR: Conflicting configuration files: ''%FILE_TO_CAUSE_NOO%'' and ''%FILE_TO_CAUSE_YES%'' can't both exist!")
                                if exist "%FILE_TO_CAUSE_NOO%" .and. exist "%FILE_TO_CAUSE_ASK%" (gosub "FATAL ERROR: Conflicting configuration files: ''%FILE_TO_CAUSE_NOO%'' and ''%FILE_TO_CAUSE_ASK%'' can't both exist!")
                                if exist "%FILE_TO_CAUSE_YES%" .and. exist "%FILE_TO_CAUSE_ASK%" (gosub "FATAL ERROR: Conflicting configuration files: ''%FILE_TO_CAUSE_YES%'' and ''%FILE_TO_CAUSE_ASK%'' can't both exist!")

                            :: determine default sync value
                                set SYNC_THIS_ONE=0
                                if "%@UPPER[%[PLAYLIST_DEFAULT_SYNC_%playlist%]]" eq "YES" (set SYNC_THIS_ONE=1  )           %+ if "%DEBUG%" eq "1" (call print-if-debug - [0] - default sync value SYNC_THIS_ONE is "%SYNC_THIS_ONE%")
                                if "%@UPPER[%[PLAYLIST_DEFAULT_SYNC_%playlist%]]" eq "NO"  (set SYNC_THIS_ONE=0  )           %+ if "%DEBUG%" eq "1" (call print-if-debug - [1] - default sync value SYNC_THIS_ONE is "%SYNC_THIS_ONE%")
                                if "%@UPPER[%[PLAYLIST_DEFAULT_SYNC_%playlist%]]" eq "ASK" (set SYNC_THIS_ONE=ASK)           %+ if "%DEBUG%" eq "1" (call print-if-debug - [2] - default sync value SYNC_THIS_ONE is "%SYNC_THIS_ONE%")

                            :: filename setup
                                set FILE_TO_CAUSE_YES=%driveLetter%:\__ mp3 sync option - sync always - %PLAYLIST% __
                                set FILE_TO_CAUSE_NOO=%driveLetter%:\__ mp3 sync option - sync never - %PLAYLIST% __
                                set FILE_TO_CAUSE_ASK=%driveLetter%:\__ mp3 sync option - sync ask - %PLAYLIST% __           %+ if "%DEBUG%" eq "1" (%COLOR_DEBUG% %+ echo FILE_TO_CAUSE_YES/NOO/ASK=%FILE_TO_CAUSE_YES%,%FILE_TO_CAUSE_NOO%,%FILE_TO_CAUSE_ASK%. %+ %COLOR_NORMAL%)

                            :: use directives to modify sync value from the default
                                if exist "%FILE_TO_CAUSE_NOO%" (set SYNC_THIS_ONE=0  )                                       %+ if "%DEBUG%" eq "1" (call print-if-debug - [3] - default sync value SYNC_THIS_ONE is "%SYNC_THIS_ONE%")
                                if exist "%FILE_TO_CAUSE_YES%" (set SYNC_THIS_ONE=1  )                                       %+ if "%DEBUG%" eq "1" (call print-if-debug - [4] - default sync value SYNC_THIS_ONE is "%SYNC_THIS_ONE%")
                                if exist "%FILE_TO_CAUSE_ASK%" (set SYNC_THIS_ONE=ASK)                                       %+ if "%DEBUG%" eq "1" (call print-if-debug - [5] - default sync value SYNC_THIS_ONE is "%SYNC_THIS_ONE%")

                            :: if the value is now "ASK", we must ask:
                                if "%NoAsk%"         eq "1"   (goto :Ask_Done)
                                if "%SYNC_THIS_ONE%" ne "ASK" (goto :Ask_Done)
                                    %COLOR_PROMPT% %+ set question=* Also sync playlist "%Playlist" to %DriveLetter: [%@LABEL[%DriveLetter]] ??? [y/N] ``
                                    %COLOR_PROMPT% %+ echos %QUESTION%
                                        inkey /c /k"yn[Enter]" /x  %question %%key >nul
                                              if "%key" eq "y" .or. "%key%" eq  "" (set SYNC_THIS_ONE=1 %+ %COLOR_SUCCESS% %+ echo  Yes!) %+ REM  "" is  time-out case
                                              if "%key" eq "n" .or.  %key%  == @28 (set SYNC_THIS_ONE=0 %+ %COLOR_REMOVAL% %+ echo  No! ) %+ REM @28 is enter-key case
                                :Ask_Done
                                                                                                                               if "%DEBUG%" eq "1" (call print-if-debug - [6] - post-prompt  value SYNC_THIS_ONE is "%SYNC_THIS_ONE%")
                            :: store answer for later:
                                set SYNC_ANSWER_%PLAYLIST=%SYNC_THIS_ONE%

                            :: debug:
                                if "%DEBUG_DETERMINE_WHICH_PLAYLISTS_TO_SYNC%" eq "1" (%COLOR_DEBUG% %+ echo -- set SYNC_ANSWER_%PLAYLIST=%SYNC_THIS_ONE%                                                             %+ %COLOR_NORMAL%)
                                if "%DEBUG_DETERMINE_WHICH_PLAYLISTS_TO_SYNC%" eq "1" (%COLOR_DEBUG% %+ echo -- [driveletter=%driveletter%] SYNC_THIS_ONE=%SYNC_THIS_ONE% for playlist %playlist%...cwd=%_CWD %+ echo. %+ %COLOR_NORMAL%)
                        return
                        :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                        :StatePlaylistsSyncConclusions
                            %COLOR_WARNING% %+ echo     - Syncing conclusions: %+ %COLOR_NORMAL%
                            for %%tmpList in (%POTENTIAL_PLAYLISTS%) gosub StatePlaylistSyncConclusionsForOnePlaylist %tmplist%
                        return
                        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                            ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                            :StatePlaylistSyncConclusionsForOnePlaylist [playlist]
                                set  MYVALUE=%[SYNC_ANSWER_%[PLAYLIST]]
                                if "%MYVALUE%" eq "1"   (set VERBIAGE=      Syncing %+ set COLOR1=color bright green  on black %+ set COLOR2=color green  on black)
                                if "%MYVALUE%" eq "0"   (set VERBIAGE=  NOT Syncing %+ set COLOR1=color bright red    on black %+ set COLOR2=color red    on black)
                                if "%MYVALUE%" eq "ASK" (set VERBIAGE=Maybe Syncing %+ set COLOR1=color bright yellow on black %+ set COLOR2=color yellow on black)
                                %COLOR2% %+ echos          - %VERBIAGE% %+ %COLOR1% %+ echos  %PLAYLIST% %+ %COLOR2% %+ echo .m3u
                            return
                            ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :WipeDeviceAtAppropriateLevel [driveletter desc basedir playlistdir trigger]
                        if "%NOCLEAN%"     eq "1" .or. "%QUICK%" eq "1" .or. "%SKIPWIPE%" eq "1" return
                        if "%ANSWER_WIPE%" eq "1" gosub WipeDeviceFully     %DriveLetter% %Desc% %BaseDir% %PlaylistDir% %Trigger%
                        if "%ANSWER_WIPE%" ne "1" gosub WipeDevicePartially %DriveLetter% %Desc% %BaseDir% %PlaylistDir% %Trigger%
                    return
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :WipeDeviceFully [DriveLetter Desc BaseDir PlaylistDir Trigger]
                        %COLOR_WARNING% %+ echo     - Wiping device (%@UPPER[%DriveLetter]:) fully... %+ if "%DEBUG_WIPE%" eq "1" (pause) %+ %COLOR_NORMAL%
                        if isdir  %DriveLetter%:\%BaseDir%                          (goto :MP3_Dir_Fine)
                        :f exist "%DriveLetter%:\mp3 sync option - no playlists __" (goto :MP3_Dir_Fine)
                            call alarm-beep basedir \%BaseDir% should exist here! 2019340912340923!) 
                            %DriveLetter%:\
                        :MP3_Dir_Fine
                        %DriveLetter%:
                        %DriveLetter%:\%BaseDir%\
                        cd %DriveLetter%:\%BaseDir%
                        %COLOR_DEBUG% %+ echo          - About to remove all ... driveletter=%driveletter%, basedir=%basedir%, curdir=%_CWP 
                        gosub RemoveAllDirectoriesANDFiles

                        :: get files in root, too, since we collapse out of \mp3\ in situations:
                        %DriveLetter%:
                        %DriveLetter%:\
                        cd \
                        if exist %FILEMASK_AUDIO% (*del %FILEMASK_AUDIO%)                       
                    return		
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :WipeDevicePartially [DriveLetter Desc BaseDir PlaylistDir Trigger]
                        %COLOR_WARNING% %+ echo * Wiping device (%DriveLetter%) partially... %+ if "%DEBUG_WIPE%" eq "1" (pause)
                        %COLOR_NORMAL%  %+ %DriveLetter:\ %+ %DriveLetter:\%BaseDir\ %+ if not isdir %DriveLetter:\%BaseDir\ (echo %DriveLetter:\%BaseDir\ doesn't exist! Let's make it! %+ pause %+ md %DriveLetter:\%BaseDir\)
                            gosub ensureFileList
                            grep -i "[\\\/]unsorted"  filelist.txt   >:u8%WIPELIST%  %+ REM wipes \unsorted\ files
                            grep -i "\.[bw]a[kv]$"    filelist.txt  >>:u8%WIPELIST%  %+ REM wipes .bak and .wav 
                            grep -i ".flac$"          filelist.txt  >>:u8%WIPELIST%  %+ REM wipes .flack
                        %WIPECOMMAND% @%WIPELIST%
                        %WIPECOMMAND%  %WIPELIST%
                    return		
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :SyncTheM3UPlaylistFiles [DriveLetter Desc BaseDir PlaylistDir Trigger]
                        if exist "%DriveLetter%:\__ mp3 sync option - no playlists __" .or. "%SYNC_SKIP_PLAYLISTS_ANYWAY%" eq "1" return
                        set NOVALIDATE=1
                            :USAGE: sync-mp3-playlists-to-location.bat [ORIGINAL_PLAYLIST_FOLDER]  [NEW_PLAYLIST_FOLDER]        [NEW_MUSIC_FOLDER] [LOCAL_TRIGGER_FILE]
                            :USAGE: sync-mp3-playlists-to-location.bat C:\MP3\LISTS                J:\MUSIC\PLAYLIST            J:\MUSIC           %MP3OFFICIAL%\LISTS\TRIGGER-CASMP3.TRG
                            call    sync-mp3-playlists-to-location.bat %mp3official%\lists         %DriveLetter%:\%PlaylistDir% \%BaseDir%         %Trigger%
                        unset /q NOVALIDATE
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :NewSyncMusic [DriveLetter Desc BaseDir PlaylistDir Trigger]
                        for %%tmpList in (%POTENTIAL_PLAYLISTS%) gosub NewSyncMusicForOnePlaylist %DriveLetter% %Desc% %BaseDir% %PlaylistDir% %Trigger% %tmplist%
                    return
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                            :NewSyncMusicForOnePlaylist [DriveLetter Desc BaseDir PlaylistDir Trigger playlist]
                                :: Get value for whether we should sync this playlist or not
                                    set VALUE=%[SYNC_ANSWER_%[PLAYLIST]]

                                :: so try this instead:
                                    gosub :StatePlaylistSyncConclusionsForOnePlaylist %playlist%

                                :: handle flac not being supported in some situations
                                    set FLAC=1 %+ if exist "\__ mp3 sync option - no flac __" (set FLAC=0)

                                :: sync playlist 
                                    if "%VALUE%" ne "1" goto :No
                                        %COLOR_IMPORTANT%                              

                                        echo                   - RUNNING: %LAUNCHER%   sync-filelist %mp3%\lists\%PLAYLIST%.m3u %DriveLetter%:\%BaseDir%\
                                        %COLOR_SUBTLE%        %+          %LAUNCHER%   sync-filelist %mp3%\lists\%PLAYLIST%.m3u %DriveLetter%:\%BaseDir%\
                                        %COLOR_NORMAL%                                       

                                    :No
                            return
                            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :ValidateThePlaylistsAgainstTheMusic [DriveLetter Desc BaseDir PlaylistDir Trigger]
                        if not exist "%DriveLetter%:\__ mp3 sync option - no playlists __" call validate-important-playlists.bat %DriveLetter:\%PlaylistDir
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :MarkWhenSyncOccurred
                        ::::: Mark when it was last synced, so the device itself reports when it was last nurtured:
                        cd \
                        call yyyymmdd
                        if exist "____ LAST SYNCED ON *" *del "____ LAST SYNCED ON *"
                        >        "____ LAST SYNCED ON %YYYYMMDD% __"
                        echo.
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

::::: UTILITY FUNCTIONS:

                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :::::::::::::::::::::::::::::::::::
                    :FATALERROR [msg]
                        %COLOR_ALARM% %+ echos * FATAL ERROR: %msg! 
                        %COLOR_NORMAL %+ echo. 
                        set ERROR=1
                        call white-noise 2
                        cancel
                        goto :END       %+ REM This should never happen, but y'know, just in case cancel stops working somehow
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :CollapseTheFolderStructureIfInstructed
                        :: DEBUG: %COLOR_DEBUG% %+ echo if not exist "%DriveLetter%:\__ mp3 sync option - collapse __" return %+ color white on black

                        if not exist "\__ mp3 sync option - collapse __" return
                        if "%LAUNCHER%" eq "%LAUNCHER_START%" (%COLOR_PROMPT% %+ echos * Wait for sync to finish and %+ pause %+ %COLOR_NORMAL%)
                        cd \
                        gosub ThrowAllFilesToRootDir
                        gosub RemoveAllDirectoriesOnly  %+ echo. %+ echo. %+ echo. %+ echo. %+ echo.
                        md \mp3
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::
                    :RemoveAllDirectoriesANDFiles
                        %COLOR_REMOVAL%
                            if exist "@filelist.txt" *del "@filelist.txt"
                            if exist   filelist.txt  *del   filelist.txt         
                            :DEBUG: echo %_CWD %+ pause
                            sweep if exist %FILEMASK_AUDIO% (*del /s %FILEMASK_AUDIO%)
                            if exist [a-z0-9_]* (sweep rd *)
                            if exist [a-z0-9_]* (sweep rd *)
                            if exist [a-z0-9_]* (sweep rd *)
                            if exist [a-z0-9_]* (sweep rd *)
                            if exist [a-z0-9_]* (sweep rd *)
                            if exist [a-z0-9_]* (sweep rd *)
                            if exist [a-z0-9_]* (sweep rd *)
                            if exist [a-z0-9_]* (sweep rd *)
                            if exist [a-z0-9_]* (sweep rd *)
                            if exist [a-z0-9_]* (sweep rd *)
                            cd \
                            if not isdir mp3 (*md MP3)
                            if exist %FILEMASK_AUDIO% (*del /s %FILEMASK_AUDIO%)
                            cd -
                        %COLOR_NORMAL%
                    return
                    ::::::::::::::::::::::::::::::::
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :RemoveAllDirectoriesOnly
                        REM Haha, look at the old hard-coded way of just blindly removing all folders twenty times,
                        REM done by finding a sentence ("do this twenty times now") that happens to have 20 letters in it:
                        REM :::for %1 in (D o T h i s T w e n t y T i m e s N o W) (sweep rd *)

                        REM The new way makes more sense: Go through a list of folders, and remove each one:
                        gosub ensureDirList
                        %COLOR_REMOVAL% %+ for %1 in (@dirlist.txt) if isdir "%1" rd /q /s "%1" %+ %COLOR_NORMAL%
                    return
                    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :ThrowAllFilesToRootDir
                        gosub ensureFilelist
                        :: only move those files that are in subdirs, i.e., path is longer than "x:\", 3 characters:
                        for %1 in (@filelist.txt) (%COLOR_REMOVAL% %+ if %@LEN[%@PATH[%@TRUENAME["%1"]]] gt 3 (echo ray|move /r "%1" %+ %COLOR_IMPORTANT_LESS% %+ echo * moving to root: %1 )) \ %+ %COLOR_NORMAL%
                    return
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :ensureFileList
                        if not exist filelist.txt (dir /a:-d /s /b /[!filelist.txt] >:u8filelist.txt)
                    return                        
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    :ensureDirList
                        if not exist  dirlist.txt (dir /a:d     /b                  >:u8 dirlist.txt)
                    return                        
                    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

                
:END
	unset /q SYNCONLY
	unset /q EXITAFTER
    unset /q VALUE
    unset /q ARG1
    unset /q PLAYLIST_DEFAULT_SYNC_*
    unset /q SYNC_ANSWER_*
    unset /q ANWER*
	cd \
	call yyyymmdd
	:got sick of seeing this: if "%ERROR%" ne "1" dir

