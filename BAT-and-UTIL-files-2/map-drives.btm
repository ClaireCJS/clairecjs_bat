@echo off
 on break echo Break?

:::::: USAGE: map-drives	      - maps all machines that get mapped by default.        retry if there are failures.
:::::: USAGE: map-drives once	  - maps all machines that get mapped by default. do not retry if there are failures.
:::::: USAGE: map-drives all	  - attempt to map every known drive, even those that don't get mapped by default.         retry if there are failures. MUST BE FIRST PARAMETER.
:::::: USAGE: map-drives all once - attempt to map every known drive, even those that don't get mapped by default   do not retry if there are failures.
:::::: USAGE: map-drives ... exit - add 'exit' to options to exit afterward - useful for popped up windows that we want to auto-disappear
:::::: USAGE: map-drives NAME	  - map all drives to a specific machine

::::: DEBUG:
    :: echo admin is %_ADMIN %+ pause
    set DEBUG_NET_USE_COMMANDS=1
    if defined CREATE_PENTAGRAM (echos %CREATE_PENTAGRAM%)

::::: CONFIG:
    set PERSISTENT=YES     %+ REM was no until 202308

::::: SETUP:
    :: How will we run just parts of this functionality without running it all? 
        if   "%@LEN[%1]" eq "1"                              (gosub :mapSingleLetter %1                           %+ goto :END) %+ rem for "map-drives d"  if you want to just map d:
        if   "%@LEN[%1]" eq "2" .and. "%RIGHT[1,%1]" eq ":"  (echo asdfasdf! %+ gosub :mapSingleLetter %@LEFT[1,%1]                 %+ goto :END) %+ rem for "map-drives d:" if you want to just map d: and refuse to remember proper invocation
        if "%@UPPER[%1]" eq "ALL"                            (gosub :doAll                                        %+ goto :END)
        if "%@UPPER[%1]" eq "EVERY"                          (gosub :doAll	                                  %+ goto :END)
        if "%@UPPER[%1]" eq "SYMLINKS"                       (call error "SYMLINKS IS MOVED! STAHP!"    %+ pause  %+ goto :END)
        if "%@UPPER[%1]" eq "LINKS_ONLY"                     (call error "SYMLINKS IS MOVED! STAHP!"    %+ pause  %+ goto :END)


    :: Validate environment, environment variables
        call checkmachinename.bat
        call environm.btm force
        call validate-environment-variables COLOR_NORMAL COLOR_SUBTLE

    :: Initialize flags
        gosub setEnvVarIfAppropriate_Once
        gosub setEnvVarIfAppropriate_Validate
        set DEBUGFIRE=0
        set       ERR=0

    :: Per-computer runs:
        for %comp in (%all_computers%) (if "%comp%" eq "%1" (gosub mapAllDrivesForAMachineNamed %comp% %+ goto :The_Very_END))                                                                                                                                                   %+ REM :OLD: if "%@UPPER[%1]" eq "FIRE"       (gosub :mapAllDrivesForAMachineNamed Fire    %+ goto :The_Very_END)

::::: MAP ALL OF OUR DRIVES. GIVE ORDER-PREFERENCE TO MACHINES THAT HOST FREQUENTLY-USED REPOSITORIES:
    :MAIN
    :doAll
        gosub mapAllDrivesForEveryMachine
        gosub CheckIfSuccessful
    goto :END

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :setEnvVarIfAppropriate_Once
            :: How aggressively will we map the drives:
                if "%AUTOEXEC%"  eq "1"    set ONCE=1
                if "%@UPPER[%1]" eq "ONCE" set ONCE=1
                if "%@UPPER[%2]" eq "ONCE" set ONCE=1
                if "%@UPPER[%3]" eq "ONCE" set ONCE=1
                if "%@UPPER[%3]" eq "ONCE" set ONCE=1
                if "%@UPPER[%4]" eq "ONCE" set ONCE=1
                if "%@UPPER[%5]" eq "ONCE" set ONCE=1
        :return
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :setEnvVarIfAppropriate_Validate
            :: How aggressively will we validate our mappings?:
                if          "1"  eq "%VALIDATE%" set VALIDATE_AFTER_MAPPING=1
                if "%@UPPER[%1]" eq  "VALIDATE"  set VALIDATE_AFTER_MAPPING=1
                if "%@UPPER[%2]" eq  "VALIDATE"  set VALIDATE_AFTER_MAPPING=1
                if "%@UPPER[%3]" eq  "VALIDATE"  set VALIDATE_AFTER_MAPPING=1
                if "%@UPPER[%3]" eq  "VALIDATE"  set VALIDATE_AFTER_MAPPING=1
                if "%@UPPER[%4]" eq  "VALIDATE"  set VALIDATE_AFTER_MAPPING=1
                if "%@UPPER[%5]" eq  "VALIDATE"  set VALIDATE_AFTER_MAPPING=1
        return
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :mapAllDrivesForEveryMachine
            for %computer in (%ALL_COMPUTERS_UP%) gosub mapAllDrivesForAMachineNamed %computer%
        return
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :mapAllDrivesForAMachineNamed [MACHINE]
            :: don't bother if the machine is down
                if "%[%MACHINE%_DOWN]" eq "1" (%COLOR_WARNING% %+ echo %MACHINE% is down. Not mapping. %+ %COLOR_NORMAL% %+ return)

            :: let user know what we're doing
                echo. %+ echo. %+ echo.
                color bright green on red  %+ Echo      ******** Restoring network connections for \\%@UPPER[%MACHINE%]... ********     ``
                color        white on black
                echo.

            :: map each drive in that machine's list of drives
                for %letter in (%[DRIVES_%MACHINE%]) gosub mapDrive %letter% %[MAPPING_%letter%] %MACHINE%

            :: pause if the debug flag for that machine is turned on
                if "%[DEBUG%MACHINE%]" eq "1" pause
        return
        :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :mapSingleLetter [letter]
            :: figure out what machine the letter belongs to
                for %tmpMachine in (%all_computers_up%) if %@regex[%@upper[%letter%],%[drives_%tmpmachine%]] == 1 (set MACHINE=%tmpmachine)

            :: then map it
                gosub mapDrive %letter% %[MAPPING_%letter%] %MACHINE%
        return
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :mapDrive [letter sharename machine]
            :: DEBUG: echo * mapdrive %letter% %sharename% %machine%

            :: if we are mapping to the machine we are currently on, we should only map the machine's C drive, and none other:
                if "%@UPPER[%MACHINENAME%]" eq "%@UPPER[%machine%]" .and. "%@UPPER[%LETTER%]" ne "%[DRIVE_C_%MACHINE%]" return

            :: check for tethering
                set TMP_IP=%[MAPPING_%MACHINE%_IP]
                if "%TETHERING%" eq "1" .and. defined MAPPING_%MACHINE%_IP_TETHERING (set TMP_IP=%[MAPPING_%MACHINE%_IP_TETHERING])

            :: check for drive being down

                :: DEBUG ::
                ::echo [1]=%LETTER%_DOWN [2]=%[%LETTER]_DOWN [3]=%[[%LETTER]_DOWN] [4]=%%[[%LETTER]_DOWN] [5E]=%%[%[%LETTER]_DOWN] [5]=%[%[%LETTER]_DOWN]
                ::echo if "%[%[%LETTER]_DOWN]" eq "1" (echo * NOT mapping %LETTER%: because %[%LETTER]_DOWN is %[%[%LETTER]_DOWN] {not a real error message, this is debug output})
                       if "%[%[%LETTER]_DOWN]" eq "1" (%COLOR_WARNING%)
                       if "%[%[%LETTER]_DOWN]" eq "1" (echo * NOT mapping %LETTER%: because %[%LETTER]_DOWN is %[%[%LETTER]_DOWN])
                       if "%[%[%LETTER]_DOWN]" eq "1" (return)
                :pause


            :: say what we're doing
                *color bright white on black %+ echos * Mapping ``
                *color bright green on black %+ echos %letter%
                *color        green on black %+ echos :
                *color bright white on black %+ echos  (``
                *color bright red   on black %+ echos %machine%, %TMP_IP%
                *color bright white on black %+ echo )...
                *color        white on black %+ echo.

            :: remove old mapping & re-create it:
                %COLOR_SUBTLE% %+ echo y | net use %LETTER%: /delete
                %COLOR_SUBTLE% %+ if "%DEBUG%" eq "1" .or. "%DEBUG_NET_USE_COMMANDS%" eq "1" (%COLOR_DEBUG% %+ echo net use %LETTER%: \\%TMP_IP%\%SHARENAME% %%[MAPPING_%MACHINE%_PWD] /USER:%[MAPPING_%MACHINE%_USR] /PERSISTENT:%PERSISTENT% %+ %COLOR_NORMAL%)
                %COLOR_SUBTLE% %+ if "%DEBUG%" eq "1" .or. "%DEBUG_NET_USE_COMMANDS%" eq "1" (%COLOR_DEBUG% %+ echo net use %LETTER%: \\%TMP_IP%\%SHARENAME%  %CONCEAL_ON%%[MAPPING_%MACHINE%_PWD]%CONCEAL_OFF% /USER:%[MAPPING_%MACHINE%_USR] /PERSISTENT:%PERSISTENT% %+ %COLOR_NORMAL%)
                rem 2024/10/05 —— huge bug in implementation of net.exe command where passwords that start with a slash are misinterpreted as a command-line option
                rem            —— The people on StackExchange don't seem to know how to fix this problem —— or even accept that it really exists, despite multiple posts about it
                rem            —— We tested that the password cannot be echoed via a pipe. So WTF do we do? Just not have passwords starting with slashes?
                %COLOR_SUBTLE% %+ echo y |                                                                          net use %LETTER%: \\%TMP_IP%\%SHARENAME%  %[MAPPING_%MACHINE%_PWD] /USER:%[MAPPING_%MACHINE%_USR] /PERSISTENT:%PERSISTENT%
                %COLOR_NORMAL%  
        return
        :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :CheckIfSuccessful
            if "%ONCE" eq "1" return
            for %computer in (%ALL_COMPUTERS_UP%) gosub CheckIfSuccessfulForMachine %computer%
        return
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        :CheckIfSuccessfulForMachine [machine_currently_checking]
            :: don't bother checking if it's the machine we are actually on, or a work machine:
              if "%@UPPER[%machine_currently_checking%]" eq "%MACHINENAME%" return

            :: otherwise, check that each drive is mapped:
                :DEBUG: echo * Checking if %machine_currently_checking% was mapped .. %[DRIVES_%machine_currently_checking%]
                for %drive% in (%[DRIVES_%machine_currently_checking%]) if "%@READY[%drive%]" eq "1" goto :Fine
                    set ERR=1
                    set ERR%machine_currently_checking%=1
                    set MAPPING_ERR_%machine_currently_checking%=1
                    color bright red on blue %+ echo Retrying mappings for %machine_currently_checking%... %+ color white on black
                    gosub mapAllDrivesForAMachineNamed %machine_currently_checking%
                :Fine
        return
        :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

        ::::::::::::::::::::::::::::
        :UnsetEnvironmentVariables
            unset /q password
            unset /q once
            unset /q usr
            unset /q err
            unset MAPPING_*_PWD
        return
        ::::::::::::::::::::::::::::

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:END

    gosub UnsetEnvironmentVariables

    :: Exit if we've been told to:
        if /i "%@UPPER[%1]" eq "EXIT" exit %+ if /i "%@UPPER[%2]" eq "EXIT" exit %+ if /i "%@UPPER[%3]" eq "EXIT" exit
        if /i "%@UPPER[%4]" eq "EXIT" exit %+ if /i "%@UPPER[%5]" eq "EXIT" exit %+ if /i "%@UPPER[%6]" eq "EXIT" exit
        if /i "%@UPPER[%7]" eq "EXIT" exit %+ if /i "%@UPPER[%8]" eq "EXIT" exit %+ if /i "%@UPPER[%9]" eq "EXIT" exit

    :: Validate if we've been told to:
        if "%VALIDATE_AFTER_MAPPING%" eq "1" call environm.btm validate

:The_Very_END

   	call  display-drive-mapping
    if "%1"=="exitafter" (exit)

